<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Packt.Ecommerce.Product</name>
    </assembly>
    <members>
        <member name="T:Packt.Ecommerce.Product.AutoMapperProfile">
            <summary>
            Automapper class.
            </summary>
            <seealso cref="T:AutoMapper.Profile" />
        </member>
        <member name="M:Packt.Ecommerce.Product.AutoMapperProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Packt.Ecommerce.Product.AutoMapperProfile"/> class.
            </summary>
        </member>
        <member name="M:Packt.Ecommerce.Product.AutoMapperProfile.MapEntity">
            <summary>
            Maps entities.
            </summary>
        </member>
        <member name="T:Packt.Ecommerce.Product.Contracts.IProductService">
            <summary>
            Products service contract for CRUD operations.
            </summary>
        </member>
        <member name="M:Packt.Ecommerce.Product.Contracts.IProductService.GetProductsAsync(System.String)">
            <summary>
            Gets the products asynchronously.
            </summary>
            <param name="filterCriteria">Criteria to filter products.</param>
            <returns>List of products with minimum details.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Contracts.IProductService.GetProductByIdAsync(System.String,System.String)">
            <summary>
            Gets the product by identifier asynchronously.
            </summary>
            <param name="productId">The product identifier.</param>
            <param name="productName">Product name.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Contracts.IProductService.AddProductAsync(Packt.Ecommerce.DTO.Models.ProductDetailsViewModel)">
            <summary>
            Adds the product asynchronously.
            </summary>
            <param name="product">The product.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Contracts.IProductService.UpdateProductAsync(Packt.Ecommerce.DTO.Models.ProductDetailsViewModel)">
            <summary>
            Updates the product asynchronously.
            </summary>
            <param name="product">The product.</param>
            <returns>The HTTP Response.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Contracts.IProductService.DeleteProductAsync(System.String,System.String)">
            <summary>
            Deletes the product asynchronous.
            </summary>
            <param name="productId">The product identifier.</param>
            <param name="productName">Product name.</param>
            <returns>The HTTP Response.</returns>
        </member>
        <member name="T:Packt.Ecommerce.Product.Controllers.ProductsController">
            <summary>
            The products RESTful service.
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:Packt.Ecommerce.Product.Controllers.ProductsController.productService">
            <summary>
            The product service.
            </summary>
        </member>
        <member name="F:Packt.Ecommerce.Product.Controllers.ProductsController.client">
            <summary>
            Product service.
            </summary>
        </member>
        <member name="M:Packt.Ecommerce.Product.Controllers.ProductsController.#ctor(Packt.Ecommerce.Product.Contracts.IProductService)">
            <summary>
            Initializes a new instance of the <see cref="T:Packt.Ecommerce.Product.Controllers.ProductsController"/> class.
            </summary>
            <param name="productService">The product service.</param>
        </member>
        <member name="P:Packt.Ecommerce.Product.Controllers.ProductsController.Client">
            <summary>
            Gets the Product service clinet.
            </summary>
        </member>
        <member name="M:Packt.Ecommerce.Product.Controllers.ProductsController.GetProductsAsync(System.String)">
            <summary>
            Gets the products.
            </summary>
            <param name="filterCriteria">Product filter criteria.</param>
            <returns>Products.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Controllers.ProductsController.GetProductById(System.String,System.String)">
            <summary>
            Gets the product by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">Product name.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Controllers.ProductsController.AddProductAsync(Packt.Ecommerce.DTO.Models.ProductDetailsViewModel)">
            <summary>
            Adds the product asynchronously.
            </summary>
            <param name="product">The product.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Controllers.ProductsController.UpdateProductAsync(Packt.Ecommerce.DTO.Models.ProductDetailsViewModel)">
            <summary>
            Updates the product asynchronously.
            </summary>
            <param name="product">The product.</param>
            <returns>HTTP status code.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Controllers.ProductsController.DeleteProductAsync(System.String,System.String)">
            <summary>
            Deletes the product asynchronous.
            </summary>
            <param name="id">The product identifier.</param>
            <param name="name">Product name.</param>
            <returns>The HTTP Response.</returns>
        </member>
        <member name="T:Packt.Ecommerce.Product.Services.ProductsService">
            <summary>
            Products service contract for CRUD operations.
            </summary>
        </member>
        <member name="F:Packt.Ecommerce.Product.Services.ProductsService.ContentType">
            <summary>
            Content Type.
            </summary>
        </member>
        <member name="F:Packt.Ecommerce.Product.Services.ProductsService.applicationSettings">
            <summary>
            The application settings.
            </summary>
        </member>
        <member name="F:Packt.Ecommerce.Product.Services.ProductsService.httpClient">
            <summary>
            The HTTP client.
            </summary>
        </member>
        <member name="F:Packt.Ecommerce.Product.Services.ProductsService.autoMapper">
            <summary>
            The mapper.
            </summary>
        </member>
        <member name="F:Packt.Ecommerce.Product.Services.ProductsService.cacheService">
            <summary>
            The cache service.
            </summary>
        </member>
        <member name="M:Packt.Ecommerce.Product.Services.ProductsService.#ctor(System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Options.IOptions{Packt.Ecommerce.Common.Options.ApplicationSettings},AutoMapper.IMapper,Packt.Ecommerce.Caching.Interfaces.IDistributedCacheService)">
            <summary>
            Initializes a new instance of the <see cref="T:Packt.Ecommerce.Product.Services.ProductsService"/> class.
            </summary>
            <param name="httpClientFactory">The HTTP Client factory.</param>
            <param name="applicationSettings">The application settings.</param>
            <param name="autoMapper">The mapper.</param>
            <param name="cacheService">cache service.</param>
        </member>
        <member name="M:Packt.Ecommerce.Product.Services.ProductsService.GetProductsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Packt.Ecommerce.Product.Services.ProductsService.AddProductAsync(Packt.Ecommerce.DTO.Models.ProductDetailsViewModel)">
            <inheritdoc/>
        </member>
        <member name="M:Packt.Ecommerce.Product.Services.ProductsService.UpdateProductAsync(Packt.Ecommerce.DTO.Models.ProductDetailsViewModel)">
            <inheritdoc/>
        </member>
        <member name="M:Packt.Ecommerce.Product.Services.ProductsService.GetProductByIdAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Packt.Ecommerce.Product.Services.ProductsService.DeleteProductAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Packt.Ecommerce.Product.Services.ProductsService.ThrowServiceToServiceErrors(System.Net.Http.HttpResponseMessage)">
            <summary>
            Throws the service to service errors.
            </summary>
            <param name="response">The response.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:Packt.Ecommerce.Product.Startup">
            <summary>
            Startup class.
            </summary>
        </member>
        <member name="M:Packt.Ecommerce.Product.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Packt.Ecommerce.Product.Startup"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Packt.Ecommerce.Product.Startup.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="M:Packt.Ecommerce.Product.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Packt.Ecommerce.Product.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
        <member name="M:Packt.Ecommerce.Product.Startup.RetryPolicy">
            <summary>
            The Retry policy.
            </summary>
            <returns>HttpResponseMessage.</returns>
        </member>
        <member name="M:Packt.Ecommerce.Product.Startup.CircuitBreakerPolicy">
            <summary>
            Gets the circuit breaker policy.
            </summary>
            <returns>HttpResponseMessage.</returns>
        </member>
        <member name="T:Packt.Ecommerce.DataAccess.Protos.ProductManagerReflection">
            <summary>Holder for reflection information generated from ProductManager.proto</summary>
        </member>
        <member name="P:Packt.Ecommerce.DataAccess.Protos.ProductManagerReflection.Descriptor">
            <summary>File descriptor for ProductManager.proto</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.ProductQuery.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.ProductQuery.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.CategoryFieldNumber">
            <summary>Field number for the "category" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.PriceFieldNumber">
            <summary>Field number for the "price" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.QuantityFieldNumber">
            <summary>Field number for the "quantity" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.CreatedDateFieldNumber">
            <summary>Field number for the "createdDate" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.ImageUrlsFieldNumber">
            <summary>Field number for the "imageUrls" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.RatingFieldNumber">
            <summary>Field number for the "rating" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.FormatFieldNumber">
            <summary>Field number for the "format" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.AuthorsFieldNumber">
            <summary>Field number for the "authors" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.ColorFieldNumber">
            <summary>Field number for the "color" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Product.EtagFieldNumber">
            <summary>Field number for the "etag" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Rating.StarsFieldNumber">
            <summary>Field number for the "stars" field.</summary>
        </member>
        <member name="F:Packt.Ecommerce.DataAccess.Protos.Rating.PercentageFieldNumber">
            <summary>Field number for the "percentage" field.</summary>
        </member>
        <member name="P:Packt.Ecommerce.DataAccess.Protos.ProductManager.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerBase">
            <summary>Base class for server-side implementations of ProductManager</summary>
        </member>
        <member name="T:Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerClient">
            <summary>Client for ProductManager</summary>
        </member>
        <member name="M:Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for ProductManager</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for ProductManager that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Packt.Ecommerce.DataAccess.Protos.ProductManager.BindService(Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Packt.Ecommerce.DataAccess.Protos.ProductManager.BindService(Grpc.Core.ServiceBinderBase,Packt.Ecommerce.DataAccess.Protos.ProductManager.ProductManagerBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
    </members>
</doc>
